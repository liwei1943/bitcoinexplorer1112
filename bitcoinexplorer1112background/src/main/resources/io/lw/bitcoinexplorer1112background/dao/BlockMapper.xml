<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.lw.bitcoinexplorer1112background.dao.BlockMapper">
  <resultMap id="BaseResultMap" type="io.lw.bitcoinexplorer1112background.po.Block">
    <id column="blockhash" jdbcType="CHAR" property="blockhash" />
    <result column="confirmations" jdbcType="INTEGER" property="confirmations" />
    <result column="timestamp" jdbcType="INTEGER" property="timestamp" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="txnumber" jdbcType="INTEGER" property="txnumber" />
    <result column="difficulty" jdbcType="DOUBLE" property="difficulty" />
    <result column="weight" jdbcType="INTEGER" property="weight" />
    <result column="merkleroot" jdbcType="CHAR" property="merkleroot" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="bits" jdbcType="INTEGER" property="bits" />
    <result column="miner" jdbcType="VARCHAR" property="miner" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="nonce" jdbcType="INTEGER" property="nonce" />
    <result column="txvolume" jdbcType="DOUBLE" property="txvolume" />
    <result column="blockreward" jdbcType="DOUBLE" property="blockreward" />
    <result column="feereward" jdbcType="DOUBLE" property="feereward" />
  </resultMap>
  <sql id="Base_Column_List">
    blockhash, confirmations, timestamp, height, txnumber, difficulty, weight, merkleroot, 
    version, bits, miner, size, nonce, txvolume, blockreward, feereward
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    insert into block (blockhash, confirmations, timestamp, 
      height, txnumber, difficulty, 
      weight, merkleroot, version, 
      bits, miner, size, 
      nonce, txvolume, blockreward, 
      feereward)
    values (#{blockhash,jdbcType=CHAR}, #{confirmations,jdbcType=INTEGER}, #{timestamp,jdbcType=INTEGER}, 
      #{height,jdbcType=INTEGER}, #{txnumber,jdbcType=INTEGER}, #{difficulty,jdbcType=DOUBLE}, 
      #{weight,jdbcType=INTEGER}, #{merkleroot,jdbcType=CHAR}, #{version,jdbcType=VARCHAR}, 
      #{bits,jdbcType=INTEGER}, #{miner,jdbcType=VARCHAR}, #{size,jdbcType=INTEGER}, 
      #{nonce,jdbcType=INTEGER}, #{txvolume,jdbcType=DOUBLE}, #{blockreward,jdbcType=DOUBLE}, 
      #{feereward,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        blockhash,
      </if>
      <if test="confirmations != null">
        confirmations,
      </if>
      <if test="timestamp != null">
        timestamp,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="txnumber != null">
        txnumber,
      </if>
      <if test="difficulty != null">
        difficulty,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="merkleroot != null">
        merkleroot,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="bits != null">
        bits,
      </if>
      <if test="miner != null">
        miner,
      </if>
      <if test="size != null">
        size,
      </if>
      <if test="nonce != null">
        nonce,
      </if>
      <if test="txvolume != null">
        txvolume,
      </if>
      <if test="blockreward != null">
        blockreward,
      </if>
      <if test="feereward != null">
        feereward,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        #{blockhash,jdbcType=CHAR},
      </if>
      <if test="confirmations != null">
        #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="txnumber != null">
        #{txnumber,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null">
        #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="merkleroot != null">
        #{merkleroot,jdbcType=CHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="bits != null">
        #{bits,jdbcType=INTEGER},
      </if>
      <if test="miner != null">
        #{miner,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        #{size,jdbcType=INTEGER},
      </if>
      <if test="nonce != null">
        #{nonce,jdbcType=INTEGER},
      </if>
      <if test="txvolume != null">
        #{txvolume,jdbcType=DOUBLE},
      </if>
      <if test="blockreward != null">
        #{blockreward,jdbcType=DOUBLE},
      </if>
      <if test="feereward != null">
        #{feereward,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    update block
    <set>
      <if test="confirmations != null">
        confirmations = #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="timestamp != null">
        timestamp = #{timestamp,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="txnumber != null">
        txnumber = #{txnumber,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null">
        difficulty = #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="merkleroot != null">
        merkleroot = #{merkleroot,jdbcType=CHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=VARCHAR},
      </if>
      <if test="bits != null">
        bits = #{bits,jdbcType=INTEGER},
      </if>
      <if test="miner != null">
        miner = #{miner,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        size = #{size,jdbcType=INTEGER},
      </if>
      <if test="nonce != null">
        nonce = #{nonce,jdbcType=INTEGER},
      </if>
      <if test="txvolume != null">
        txvolume = #{txvolume,jdbcType=DOUBLE},
      </if>
      <if test="blockreward != null">
        blockreward = #{blockreward,jdbcType=DOUBLE},
      </if>
      <if test="feereward != null">
        feereward = #{feereward,jdbcType=DOUBLE},
      </if>
    </set>
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    update block
    set confirmations = #{confirmations,jdbcType=INTEGER},
      timestamp = #{timestamp,jdbcType=INTEGER},
      height = #{height,jdbcType=INTEGER},
      txnumber = #{txnumber,jdbcType=INTEGER},
      difficulty = #{difficulty,jdbcType=DOUBLE},
      weight = #{weight,jdbcType=INTEGER},
      merkleroot = #{merkleroot,jdbcType=CHAR},
      version = #{version,jdbcType=VARCHAR},
      bits = #{bits,jdbcType=INTEGER},
      miner = #{miner,jdbcType=VARCHAR},
      size = #{size,jdbcType=INTEGER},
      nonce = #{nonce,jdbcType=INTEGER},
      txvolume = #{txvolume,jdbcType=DOUBLE},
      blockreward = #{blockreward,jdbcType=DOUBLE},
      feereward = #{feereward,jdbcType=DOUBLE}
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <resultMap id="BaseResultMap" type="io.lw.bitcoinexplorer1112background.po.Block">
    <id column="blockhash" jdbcType="CHAR" property="blockhash" />
    <result column="blockchain_id" jdbcType="INTEGER" property="blockchainId" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="time" jdbcType="DATE" property="time" />
    <result column="tx_size" jdbcType="INTEGER" property="txSize" />
    <result column="size_on_disk" jdbcType="BIGINT" property="sizeOnDisk" />
    <result column="difficulty" jdbcType="DOUBLE" property="difficulty" />
    <result column="prev_blockhash" jdbcType="CHAR" property="prevBlockhash" />
    <result column="next_blockhash" jdbcType="CHAR" property="nextBlockhash" />
    <result column="output_total" jdbcType="DOUBLE" property="outputTotal" />
    <result column="transaction_fees" jdbcType="DOUBLE" property="transactionFees" />
    <result column="merkle_root" jdbcType="CHAR" property="merkleRoot" />
  </resultMap>
  <sql id="Base_Column_List">
    blockhash, blockchain_id, height, time, tx_size, size_on_disk, difficulty, prev_blockhash, 
    next_blockhash, output_total, transaction_fees, merkle_root
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    insert into block (blockhash, blockchain_id, height, 
      time, tx_size, size_on_disk, 
      difficulty, prev_blockhash, next_blockhash, 
      output_total, transaction_fees, merkle_root
      )
    values (#{blockhash,jdbcType=CHAR}, #{blockchainId,jdbcType=INTEGER}, #{height,jdbcType=INTEGER}, 
      #{time,jdbcType=DATE}, #{txSize,jdbcType=INTEGER}, #{sizeOnDisk,jdbcType=BIGINT}, 
      #{difficulty,jdbcType=DOUBLE}, #{prevBlockhash,jdbcType=CHAR}, #{nextBlockhash,jdbcType=CHAR}, 
      #{outputTotal,jdbcType=DOUBLE}, #{transactionFees,jdbcType=DOUBLE}, #{merkleRoot,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        blockhash,
      </if>
      <if test="blockchainId != null">
        blockchain_id,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="txSize != null">
        tx_size,
      </if>
      <if test="sizeOnDisk != null">
        size_on_disk,
      </if>
      <if test="difficulty != null">
        difficulty,
      </if>
      <if test="prevBlockhash != null">
        prev_blockhash,
      </if>
      <if test="nextBlockhash != null">
        next_blockhash,
      </if>
      <if test="outputTotal != null">
        output_total,
      </if>
      <if test="transactionFees != null">
        transaction_fees,
      </if>
      <if test="merkleRoot != null">
        merkle_root,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        #{blockhash,jdbcType=CHAR},
      </if>
      <if test="blockchainId != null">
        #{blockchainId,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=DATE},
      </if>
      <if test="txSize != null">
        #{txSize,jdbcType=INTEGER},
      </if>
      <if test="sizeOnDisk != null">
        #{sizeOnDisk,jdbcType=BIGINT},
      </if>
      <if test="difficulty != null">
        #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="prevBlockhash != null">
        #{prevBlockhash,jdbcType=CHAR},
      </if>
      <if test="nextBlockhash != null">
        #{nextBlockhash,jdbcType=CHAR},
      </if>
      <if test="outputTotal != null">
        #{outputTotal,jdbcType=DOUBLE},
      </if>
      <if test="transactionFees != null">
        #{transactionFees,jdbcType=DOUBLE},
      </if>
      <if test="merkleRoot != null">
        #{merkleRoot,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    update block
    <set>
      <if test="blockchainId != null">
        blockchain_id = #{blockchainId,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=DATE},
      </if>
      <if test="txSize != null">
        tx_size = #{txSize,jdbcType=INTEGER},
      </if>
      <if test="sizeOnDisk != null">
        size_on_disk = #{sizeOnDisk,jdbcType=BIGINT},
      </if>
      <if test="difficulty != null">
        difficulty = #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="prevBlockhash != null">
        prev_blockhash = #{prevBlockhash,jdbcType=CHAR},
      </if>
      <if test="nextBlockhash != null">
        next_blockhash = #{nextBlockhash,jdbcType=CHAR},
      </if>
      <if test="outputTotal != null">
        output_total = #{outputTotal,jdbcType=DOUBLE},
      </if>
      <if test="transactionFees != null">
        transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      </if>
      <if test="merkleRoot != null">
        merkle_root = #{merkleRoot,jdbcType=CHAR},
      </if>
    </set>
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    update block
    set blockchain_id = #{blockchainId,jdbcType=INTEGER},
      height = #{height,jdbcType=INTEGER},
      time = #{time,jdbcType=DATE},
      tx_size = #{txSize,jdbcType=INTEGER},
      size_on_disk = #{sizeOnDisk,jdbcType=BIGINT},
      difficulty = #{difficulty,jdbcType=DOUBLE},
      prev_blockhash = #{prevBlockhash,jdbcType=CHAR},
      next_blockhash = #{nextBlockhash,jdbcType=CHAR},
      output_total = #{outputTotal,jdbcType=DOUBLE},
      transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      merkle_root = #{merkleRoot,jdbcType=CHAR}
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <resultMap id="BaseResultMap" type="io.lw.bitcoinexplorer1112background.po.Block">
    <id column="blockhash" jdbcType="CHAR" property="blockhash" />
    <result column="block_id" jdbcType="INTEGER" property="blockId" />
    <result column="confirmations" jdbcType="INTEGER" property="confirmations" />
    <result column="time" jdbcType="BIGINT" property="time" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="txnumber" jdbcType="INTEGER" property="txnumber" />
    <result column="difficulty" jdbcType="DOUBLE" property="difficulty" />
    <result column="weight" jdbcType="INTEGER" property="weight" />
    <result column="merkle_root" jdbcType="CHAR" property="merkleRoot" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="bits" jdbcType="INTEGER" property="bits" />
    <result column="miner" jdbcType="VARCHAR" property="miner" />
    <result column="nonce" jdbcType="INTEGER" property="nonce" />
    <result column="txvolume" jdbcType="DOUBLE" property="txvolume" />
    <result column="block_reward" jdbcType="DOUBLE" property="blockReward" />
    <result column="fee_reward" jdbcType="DOUBLE" property="feeReward" />
    <result column="sizeOnDisk" jdbcType="INTEGER" property="sizeondisk" />
  </resultMap>
  <sql id="Base_Column_List">
    blockhash, block_id, confirmations, time, height, txnumber, difficulty, weight, merkle_root, 
    version, bits, miner, nonce, txvolume, block_reward, fee_reward, sizeOnDisk
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    insert into block (blockhash, block_id, confirmations, 
      time, height, txnumber, 
      difficulty, weight, merkle_root, 
      version, bits, miner, 
      nonce, txvolume, block_reward, 
      fee_reward, sizeOnDisk)
    values (#{blockhash,jdbcType=CHAR}, #{blockId,jdbcType=INTEGER}, #{confirmations,jdbcType=INTEGER}, 
      #{time,jdbcType=BIGINT}, #{height,jdbcType=INTEGER}, #{txnumber,jdbcType=INTEGER}, 
      #{difficulty,jdbcType=DOUBLE}, #{weight,jdbcType=INTEGER}, #{merkleRoot,jdbcType=CHAR}, 
      #{version,jdbcType=VARCHAR}, #{bits,jdbcType=INTEGER}, #{miner,jdbcType=VARCHAR}, 
      #{nonce,jdbcType=INTEGER}, #{txvolume,jdbcType=DOUBLE}, #{blockReward,jdbcType=DOUBLE}, 
      #{feeReward,jdbcType=DOUBLE}, #{sizeondisk,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        blockhash,
      </if>
      <if test="blockId != null">
        block_id,
      </if>
      <if test="confirmations != null">
        confirmations,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="txnumber != null">
        txnumber,
      </if>
      <if test="difficulty != null">
        difficulty,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="merkleRoot != null">
        merkle_root,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="bits != null">
        bits,
      </if>
      <if test="miner != null">
        miner,
      </if>
      <if test="nonce != null">
        nonce,
      </if>
      <if test="txvolume != null">
        txvolume,
      </if>
      <if test="blockReward != null">
        block_reward,
      </if>
      <if test="feeReward != null">
        fee_reward,
      </if>
      <if test="sizeondisk != null">
        sizeOnDisk,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        #{blockhash,jdbcType=CHAR},
      </if>
      <if test="blockId != null">
        #{blockId,jdbcType=INTEGER},
      </if>
      <if test="confirmations != null">
        #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=BIGINT},
      </if>
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="txnumber != null">
        #{txnumber,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null">
        #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="merkleRoot != null">
        #{merkleRoot,jdbcType=CHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="bits != null">
        #{bits,jdbcType=INTEGER},
      </if>
      <if test="miner != null">
        #{miner,jdbcType=VARCHAR},
      </if>
      <if test="nonce != null">
        #{nonce,jdbcType=INTEGER},
      </if>
      <if test="txvolume != null">
        #{txvolume,jdbcType=DOUBLE},
      </if>
      <if test="blockReward != null">
        #{blockReward,jdbcType=DOUBLE},
      </if>
      <if test="feeReward != null">
        #{feeReward,jdbcType=DOUBLE},
      </if>
      <if test="sizeondisk != null">
        #{sizeondisk,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    update block
    <set>
      <if test="blockId != null">
        block_id = #{blockId,jdbcType=INTEGER},
      </if>
      <if test="confirmations != null">
        confirmations = #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=BIGINT},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="txnumber != null">
        txnumber = #{txnumber,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null">
        difficulty = #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="merkleRoot != null">
        merkle_root = #{merkleRoot,jdbcType=CHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=VARCHAR},
      </if>
      <if test="bits != null">
        bits = #{bits,jdbcType=INTEGER},
      </if>
      <if test="miner != null">
        miner = #{miner,jdbcType=VARCHAR},
      </if>
      <if test="nonce != null">
        nonce = #{nonce,jdbcType=INTEGER},
      </if>
      <if test="txvolume != null">
        txvolume = #{txvolume,jdbcType=DOUBLE},
      </if>
      <if test="blockReward != null">
        block_reward = #{blockReward,jdbcType=DOUBLE},
      </if>
      <if test="feeReward != null">
        fee_reward = #{feeReward,jdbcType=DOUBLE},
      </if>
      <if test="sizeondisk != null">
        sizeOnDisk = #{sizeondisk,jdbcType=INTEGER},
      </if>
    </set>
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.lw.bitcoinexplorer1112background.po.Block">
    update block
    set block_id = #{blockId,jdbcType=INTEGER},
      confirmations = #{confirmations,jdbcType=INTEGER},
      time = #{time,jdbcType=BIGINT},
      height = #{height,jdbcType=INTEGER},
      txnumber = #{txnumber,jdbcType=INTEGER},
      difficulty = #{difficulty,jdbcType=DOUBLE},
      weight = #{weight,jdbcType=INTEGER},
      merkle_root = #{merkleRoot,jdbcType=CHAR},
      version = #{version,jdbcType=VARCHAR},
      bits = #{bits,jdbcType=INTEGER},
      miner = #{miner,jdbcType=VARCHAR},
      nonce = #{nonce,jdbcType=INTEGER},
      txvolume = #{txvolume,jdbcType=DOUBLE},
      block_reward = #{blockReward,jdbcType=DOUBLE},
      fee_reward = #{feeReward,jdbcType=DOUBLE},
      sizeOnDisk = #{sizeondisk,jdbcType=INTEGER}
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>

  <select id="getRecentBlock" resultType="io.lw.bitcoinexplorer1112background.po.Block">
    select
    <include refid="Base_Column_List" />
    from block
  </select>

  <select id="getWithPage">
    select
    <include refid="Base_Column_List" />
    from block
  </select>
</mapper>